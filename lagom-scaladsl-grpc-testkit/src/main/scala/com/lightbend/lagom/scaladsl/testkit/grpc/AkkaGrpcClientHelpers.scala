/*
 * Copyright (C) Lightbend Inc. <https://www.lightbend.com>
 */
package com.lightbend.lagom.scaladsl.testkit.grpc

import java.util.concurrent.TimeUnit

import scala.concurrent.Await
import scala.concurrent.duration.Duration

import akka.annotation.ApiMayChange
import akka.grpc.GrpcClientSettings
import akka.grpc.scaladsl.AkkaGrpcClient

import com.lightbend.lagom.scaladsl.testkit.ServiceTest

/**
 * Helpers to test Java Akka gRPC clients with Lagom
 */
@ApiMayChange
object AkkaGrpcClientHelpers {

  /**
   * Builds an `AkkaGrpcClient` for the `server` run during tests. The `server`
   * must run with SSL enabled, otherwise the creation of a client will fail.
   *
   * @param server        the `ServiceTest.TestServer` started to run the tests on
   * @param clientFactory a factory method as create by the Akka gRPC code generators
   * @return T the desired grpc client (as generated by the Akka gRPC code generators)
   * @throws IllegalArgumentException if the `server` is not setup with SSL enabled
   */
  def withGrpcClient[T <: AkkaGrpcClient, Q](
      server: ServiceTest.TestServer[_],
      // TODO: replace with AkkaGrpcClientFactory
      clientFactory: GrpcClientSettings => T,
  )(block: T => Q): Q = {
    var client: T = null.asInstanceOf[T]
    try {
      client = grpcClient[T](server, clientFactory)
      block(client)
    } finally {
      if (client != null) {
        Await.result(client.close(), grpcClientCloseTimeout)
        ()
      }
    }
  }

  /**
   * Builds an `AkkaGrpcClient` for the `server` run during tests. The `server`
   * must run with SSL enabled, otherwise the creation of a client will fail.
   *
   * The returned `client` must be stopped (in an `afterAll` block, for example).
   *
   * @param server        the `ServiceTest.TestServer` started to run the tests on
   * @param clientFactory a factory method as create by the Akka gRPC code generators
   * @return T the desired grpc client (as generated by the Akka gRPC code generators)
   * @throws IllegalArgumentException if the `server` is not setup with SSL enabled
   */
  @throws[IllegalArgumentException]
  def grpcClient[T <: AkkaGrpcClient](
      server: ServiceTest.TestServer[_],
      // TODO: replace with AkkaGrpcClientFactory
      clientFactory: GrpcClientSettings => T,
  ): T = {

    if (server.playServer.httpsPort.isEmpty)
      throw new IllegalArgumentException(
        "Creation of a gRPC client is useless. The ServiceTest.TestServer must be setup with SSL enabled.",
      )

    val httpsPort = server.playServer.httpsPort.get

    val settings = GrpcClientSettings
      .connectToServiceAt("127.0.0.1", httpsPort)(server.actorSystem)
      .withSSLContext(server.clientSslContext.get)
      // the authority must match the value of the SSL certificate used in
      // the ServiceTest.TestServer (if/when that changes or is configurable)
      // this value will have to be configurable
      .withOverrideAuthority("localhost")

    clientFactory(settings)
  }

  /** The close timeout used by gRPC clients. */
  protected def grpcClientCloseTimeout: Duration = Duration(30, TimeUnit.SECONDS)

}
